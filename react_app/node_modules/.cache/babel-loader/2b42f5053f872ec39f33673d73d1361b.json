{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\workspace\\\\webstrom-workspace\\\\react-2020\\\\react_app\\\\src\\\\components\\\\Search\\\\index.jsx\";\nimport React, { Component } from \"react\"; // import axios from \"axios\";\n\nimport PubSub from 'pubsub-js';\nexport default class Search extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.search = () => {\n      //获取用户的输入。下面使用(连续解构赋值+重命名)\n      const {\n        keyWordNode: {\n          value: keyWord\n        }\n      } = this; //先从this中解构出keyWordNode，再从keyWordNode中解构出value,再将value重命名为keyWord\n      // console.log(keyWordNode)  这里keyWordNode是未定义的。\n\n      console.log(keyWord); //发送请求前通知List更新状态\n      // this.props.updateAppState({isFirst:false,isLoading:true})\n\n      PubSub.publish('atguigu', {\n        isFirst: false,\n        isLoading: true\n      }); //发送网络请求\n      //github地址:   http://api.github.com/search/users?q=xxxxxx     这是一个get请求。\n      //#region  使用axios发送ajax\n      //       axios.get(`/search/users2?q=${keyWord}`)\n      //         .then(\n      //           response=>{\n      //             //请求成功后通知List更新状态\n      //             // this.props.updateAppState({isLoading:false,users:response.data.items})\n      //             PubSub.publish('atguigu',{isLoading:false,users:response.data.items})\n      //             console.log('成功了',response.data)\n      //           },\n      //           error=>{\n      //             console.log('失败了',error)\n      //             //请求失败后通知List更新状态\n      //             // this.props.updateAppState({isLoading:false,error:error.message})\n      //             PubSub.publish('atguigu',{isLoading:false,error:error.message})\n      //           }\n      //         )\n      //#endregion\n      //发送网络请求-------》使用Fetch发送\n\n      fetch(`/search/users2?q=${keyWord}`).then( //若果.then里面的内容返回的值是非Promise值 。那么这个Promise的状态就为成功的,值就为非Promise值。\n      // (比如断网了,下面请求就会联系服务器失败,从而返回undefined,而undefined为非Promise值。所以第一个then是成功的,)\n      response => {\n        console.log('联系服务器成功了', response);\n        return response.json();\n      }, error => {\n        console.log('联系服务器失败了', error);\n      }).then(response => {\n        console.log('获取数据成功了', response);\n      }, error => {\n        console.log('获取数据失败了', error);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"\\u641C\\u7D22github\\u7528\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: c => this.keyWordNode = c,\n          type: \"text\",\n          placeholder: \"\\u8F93\\u5165\\u5173\\u952E\\u8BCD\\u70B9\\u51FB\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.search,\n          children: \"\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["E:/workspace/webstrom-workspace/react-2020/react_app/src/components/Search/index.jsx"],"names":["React","Component","PubSub","Search","search","keyWordNode","value","keyWord","console","log","publish","isFirst","isLoading","fetch","then","response","json","error","render","c"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAC5CG,MAD4C,GACnC,MAAI;AACX;AACA,YAAM;AAACC,QAAAA,WAAW,EAAC;AAACC,UAAAA,KAAK,EAACC;AAAP;AAAb,UAAgC,IAAtC,CAFW,CAEoC;AAC/C;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAJW,CAMX;AACA;;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAe,SAAf,EAAyB;AAACC,QAAAA,OAAO,EAAC,KAAT;AAAeC,QAAAA,SAAS,EAAC;AAAzB,OAAzB,EARW,CAUX;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,MAAAA,KAAK,CAAE,oBAAmBN,OAAQ,EAA7B,CAAL,CAAqCO,IAArC,EACE;AACA;AACAC,MAAAA,QAAQ,IAAI;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBM,QAAvB;AACA,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAND,EAMGC,KAAK,IAAG;AACTT,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBQ,KAAvB;AACD,OARD,EASEH,IATF,CAUEC,QAAQ,IAAI;AACVP,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBM,QAAtB;AACD,OAZH,EAYKE,KAAK,IAAG;AACTT,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBQ,KAAtB;AACD,OAdH;AAgBD,KAjD2C;AAAA;;AAmD5CC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAO,UAAA,GAAG,EAAEC,CAAC,IAAI,KAAKd,WAAL,GAAmBc,CAApC;AAAuC,UAAA,IAAI,EAAC,MAA5C;AAAmD,UAAA,WAAW,EAAC;AAA/D;AAAA;AAAA;AAAA;AAAA,gBADF,uBAEE;AAAQ,UAAA,OAAO,EAAE,KAAKf,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA7D2C","sourcesContent":["import React,{Component} from \"react\";\r\n// import axios from \"axios\";\r\nimport PubSub from 'pubsub-js'\r\n\r\nexport default class Search extends Component {\r\n  search = ()=>{\r\n    //获取用户的输入。下面使用(连续解构赋值+重命名)\r\n    const {keyWordNode:{value:keyWord}} = this     //先从this中解构出keyWordNode，再从keyWordNode中解构出value,再将value重命名为keyWord\r\n    // console.log(keyWordNode)  这里keyWordNode是未定义的。\r\n    console.log(keyWord)\r\n\r\n    //发送请求前通知List更新状态\r\n    // this.props.updateAppState({isFirst:false,isLoading:true})\r\n    PubSub.publish('atguigu',{isFirst:false,isLoading:true})\r\n\r\n    //发送网络请求\r\n    //github地址:   http://api.github.com/search/users?q=xxxxxx     这是一个get请求。\r\n\r\n    //#region  使用axios发送ajax\r\n    //       axios.get(`/search/users2?q=${keyWord}`)\r\n    //         .then(\r\n    //           response=>{\r\n    //             //请求成功后通知List更新状态\r\n    //             // this.props.updateAppState({isLoading:false,users:response.data.items})\r\n    //             PubSub.publish('atguigu',{isLoading:false,users:response.data.items})\r\n    //             console.log('成功了',response.data)\r\n    //           },\r\n    //           error=>{\r\n    //             console.log('失败了',error)\r\n    //             //请求失败后通知List更新状态\r\n    //             // this.props.updateAppState({isLoading:false,error:error.message})\r\n    //             PubSub.publish('atguigu',{isLoading:false,error:error.message})\r\n    //           }\r\n    //         )\r\n    //#endregion\r\n\r\n    //发送网络请求-------》使用Fetch发送\r\n    fetch(`/search/users2?q=${keyWord}`).then(\r\n      //若果.then里面的内容返回的值是非Promise值 。那么这个Promise的状态就为成功的,值就为非Promise值。\r\n      // (比如断网了,下面请求就会联系服务器失败,从而返回undefined,而undefined为非Promise值。所以第一个then是成功的,)\r\n      response => {\r\n      console.log('联系服务器成功了',response)\r\n      return response.json()\r\n    }, error=> {\r\n      console.log('联系服务器失败了',error)\r\n    }\r\n    ).then(\r\n      response => {\r\n        console.log('获取数据成功了',response)\r\n      }, error=> {\r\n        console.log('获取数据失败了',error)\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"jumbotron\">\r\n        <h3 className=\"jumbotron-heading\">搜索github用户</h3>\r\n        <div>\r\n          <input ref={c => this.keyWordNode = c} type=\"text\" placeholder=\"输入关键词点击搜索\"/>&nbsp;\r\n          <button onClick={this.search}>搜索</button>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}